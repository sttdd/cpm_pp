import telebot
from telebot import types
from sqlalchemy import create_engine, Column, Integer, String, Date, Text, ForeignKey, DateTime, Sequence, BigInteger
from sqlalchemy.orm import sessionmaker, declarative_base
from datetime import datetime
from contextlib import contextmanager
import re
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "",
    "",
    ""
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, filename='bot.log', format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(CONFIG["TELEGRAM_TOKEN"])

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()


# –ú–æ–¥–µ–ª–∏ –ë–î
class User(Base):
    __tablename__ = 'users'
    user_id = Column(BigInteger, primary_key=True)
    first_name = Column(String(100), nullable=False)
    last_name = Column(String(100), nullable=False)
    position = Column(String(100))
    department = Column(String(100))
    email = Column(String(100), unique=True, nullable=False)


class Application(Base):
    __tablename__ = 'applications'
    application_id = Column(Integer, Sequence('applications_application_id_seq'), primary_key=True)
    user_id = Column(BigInteger, ForeignKey('users.user_id'), nullable=False)
    start_date = Column(Date, nullable=False)
    end_date = Column(Date, nullable=False)
    type = Column(String(100), nullable=False)
    status = Column(String(20), nullable=False)
    reason = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class Log(Base):
    __tablename__ = 'logs'
    log_id = Column(Integer, Sequence('logs_log_id_seq'), primary_key=True)
    user_id = Column(BigInteger, ForeignKey('users.user_id'), nullable=False)
    action = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(CONFIG["DB_URL"])
Base.metadata.create_all(engine)
SessionFactory = sessionmaker(bind=engine)


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@contextmanager
def db_session():
    session = SessionFactory()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise e
    finally:
        session.close()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class Keyboards:
    @staticmethod
    def main_menu():
        return types.ReplyKeyboardMarkup(resize_keyboard=True).add("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    @staticmethod
    def action():
        return types.ReplyKeyboardMarkup(resize_keyboard=True).add("üèñÔ∏è –û—Ç–ø—É—Å–∫", "ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")

    @staticmethod
    def vacation_type():
        return types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            "üå¥ –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π",
            "üåû –ï–∂–µ–≥–æ–¥–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π",
            "üèùÔ∏è –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã",
            "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )


# –£—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def send_message(chat_id, text, reply_markup=None):
    try:
        msg = bot.send_message(chat_id, text, reply_markup=reply_markup)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}: {text}")
        return msg
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
        raise


def validate_date(date_str, allow_past=False):
    try:
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        if not allow_past and date_obj < datetime.now():
            return False, "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º"
        return True, date_obj
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ì–ì–ì–ì-–ú–ú-–î–î)"


def validate_email(email):
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(email_pattern, email)), "–ù–µ–≤–µ—Ä–Ω—ã–π email" if not re.match(email_pattern, email) else None


def handle_main_menu_return(message, next_step=None, *args):
    if message.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        back_to_main_menu(message)
        return True
    if next_step:
        bot.register_next_step_handler(message, next_step, *args)
    return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        if user:
            send_message(chat_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", Keyboards.action())
        else:
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", Keyboards.main_menu())
            bot.register_next_step_handler(message, register_first_name)


@bot.message_handler(func=lambda m: m.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", Keyboards.action() if user else Keyboards.main_menu())


@bot.message_handler(func=lambda m: m.text == "üèñÔ∏è –û—Ç–ø—É—Å–∫")
def handle_vacation(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        if not user:
            send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
    send_message(chat_id, "–¢–∏–ø –æ—Ç–ø—É—Å–∫–∞:", Keyboards.vacation_type())


@bot.message_handler(func=lambda m: m.text == "ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π")
def handle_sick_leave(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        if not user:
            send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
    send_message(chat_id, "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, application_start_date, "–±–æ–ª—å–Ω–∏—á–Ω—ã–π")


@bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
def handle_my_applications(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        if not user:
            send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
        apps = session.query(Application).filter_by(user_id=chat_id).order_by(Application.application_id.desc()).all()
        if not apps:
            send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫", Keyboards.action())
            return
        markup = types.InlineKeyboardMarkup()
        for app in apps:
            btn_text = f"#{app.application_id} ({app.type}, {app.status})"
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"view_{app.application_id}"))
        send_message(chat_id, "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:", markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("view_"))
def view_application(call):
    chat_id = call.message.chat.id
    app_id = int(call.data.split("_")[1])
    with db_session() as session:
        app = session.query(Application).filter_by(application_id=app_id, user_id=chat_id).first()
        if app:
            text = (f"–ó–∞—è–≤–∫–∞ #{app.application_id}\n"
                    f"–¢–∏–ø: {app.type}\n"
                    f"–°: {app.start_date}\n"
                    f"–ü–æ: {app.end_date}\n"
                    f"–°—Ç–∞—Ç—É—Å: {app.status}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {app.reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            markup = types.InlineKeyboardMarkup()
            if app.status == "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏":
                markup.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{app_id}"))
            send_message(chat_id, text, markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def edit_application(call):
    chat_id = call.message.chat.id
    app_id = int(call.data.split("_")[1])
    with db_session() as session:
        app = session.query(Application).filter_by(application_id=app_id, user_id=chat_id).first()
        if app and app.status == "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏":
            send_message(chat_id, "–ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
            bot.register_next_step_handler(call.message, edit_application_start_date, app_id)


def edit_application_start_date(message, app_id):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, result = validate_date(message.text)
    if not is_valid:
        send_message(chat_id, f"‚ùå {result}", Keyboards.main_menu())
        handle_main_menu_return(message, edit_application_start_date, app_id)
        return
    send_message(chat_id, "–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, edit_application_end_date, app_id, result)


def edit_application_end_date(message, app_id, start_date):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, result = validate_date(message.text)
    if not is_valid or result < start_date:
        send_message(chat_id, f"‚ùå {result if not is_valid else '–ö–æ–Ω–µ—Ü —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞'}", Keyboards.main_menu())
        handle_main_menu_return(message, edit_application_end_date, app_id, start_date)
        return
    send_message(chat_id, "–ù–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞:", Keyboards.main_menu())
    bot.register_next_step_handler(message, edit_application_reason, app_id, start_date, result)


def edit_application_reason(message, app_id, start_date, end_date):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    with db_session() as session:
        app = session.query(Application).filter_by(application_id=app_id, user_id=chat_id).first()
        if app and app.status == "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏":
            app.start_date = start_date.date()
            app.end_date = end_date.date()
            app.reason = message.text
            app.updated_at = datetime.utcnow()
            session.add(Log(user_id=chat_id, action=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id}"))
            send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", Keyboards.action())
            send_message(CONFIG["HR_CHAT_ID"],
                         f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {app.type} —Å {app.start_date} –ø–æ {app.end_date}. –ü—Ä–∏—á–∏–Ω–∞: {app.reason}")


@bot.message_handler(
    func=lambda m: m.text in ["üå¥ –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π", "üåû –ï–∂–µ–≥–æ–¥–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π",
                              "üèùÔ∏è –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã"])
def handle_vacation_type(message):
    vacation_types = {
        "üå¥ –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π": "–µ–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π",
        "üåû –ï–∂–µ–≥–æ–¥–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π": "–µ–∂–µ–≥–æ–¥–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π",
        "üèùÔ∏è –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã": "–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã"
    }
    app_type = vacation_types[message.text]
    send_message(message.chat.id, "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, application_start_date, app_type)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_first_name(message):
    if handle_main_menu_return(message):
        return
    send_message(message.chat.id, "–§–∞–º–∏–ª–∏—è:", Keyboards.main_menu())
    bot.register_next_step_handler(message, register_last_name, message.text)


def register_last_name(message, first_name):
    if handle_main_menu_return(message):
        return
    send_message(message.chat.id, "–î–æ–ª–∂–Ω–æ—Å—Ç—å:", Keyboards.main_menu())
    bot.register_next_step_handler(message, register_position, first_name, message.text)


def register_position(message, first_name, last_name):
    if handle_main_menu_return(message):
        return
    send_message(message.chat.id, "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", Keyboards.main_menu())
    bot.register_next_step_handler(message, register_department, first_name, last_name, message.text)


def register_department(message, first_name, last_name, position):
    if handle_main_menu_return(message):
        return
    send_message(message.chat.id, "Email:", Keyboards.main_menu())
    bot.register_next_step_handler(message, register_email, first_name, last_name, position, message.text)


def register_email(message, first_name, last_name, position, department):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, error = validate_email(message.text)
    if not is_valid:
        send_message(chat_id, f"‚ùå {error}", Keyboards.main_menu())
        bot.register_next_step_handler(message, register_email, first_name, last_name, position, department)
        return
    with db_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
            existing_user = session.query(User).filter_by(email=message.text).first()
            if existing_user:
                send_message(chat_id, "‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", Keyboards.main_menu())
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∑–∞–Ω—è—Ç—ã–º email: {message.text} –¥–ª—è chat_id {chat_id}")
                bot.register_next_step_handler(message, register_email, first_name, last_name, position, department)
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                user_id=chat_id,
                first_name=first_name,
                last_name=last_name,
                position=position,
                department=department,
                email=message.text
            )
            session.add(new_user)
            session.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            session.add(Log(user_id=chat_id, action="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
            session.flush()  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ª–æ–≥ —Ç–æ–∂–µ –∑–∞–ø–∏—Å–∞–Ω

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            saved_user = session.query(User).filter_by(user_id=chat_id).first()
            if not saved_user:
                raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {first_name} {last_name}, {message.text}")
            send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", Keyboards.action())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {str(e)}")
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start", Keyboards.main_menu())


# –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏
def application_start_date(message, app_type):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, result = validate_date(message.text)
    if not is_valid:
        send_message(chat_id, f"‚ùå {result}", Keyboards.main_menu())
        handle_main_menu_return(message, application_start_date, app_type)
        return
    send_message(chat_id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, application_end_date, app_type, result)


def application_end_date(message, app_type, start_date):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, result = validate_date(message.text)
    if not is_valid or result < start_date:
        send_message(chat_id, f"‚ùå {result if not is_valid else '–ö–æ–Ω–µ—Ü —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞'}", Keyboards.main_menu())
        handle_main_menu_return(message, application_end_date, app_type, start_date)
        return
    send_message(chat_id, "–ü—Ä–∏—á–∏–Ω–∞:", Keyboards.main_menu())
    bot.register_next_step_handler(message, application_reason, app_type, start_date, result)


def application_reason(message, app_type, start_date, end_date):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    with db_session() as session:
        app = Application(user_id=chat_id, start_date=start_date.date(), end_date=end_date.date(),
                          type=app_type, status="–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", reason=message.text)
        session.add(app)
        session.flush()
        app_id = app.application_id
        session.add(Log(user_id=chat_id, action=f"–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ #{app_id}"))
        send_message(CONFIG["HR_CHAT_ID"],
                     f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç {chat_id}: {app_type} —Å {start_date.date()} –ø–æ {end_date.date()}. –ü—Ä–∏—á–∏–Ω–∞: {message.text}")
        send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞", Keyboards.action())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.polling(none_stop=True, timeout=20)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        engine.dispose()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")
        engine.dispose()