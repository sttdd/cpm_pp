from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLineEdit, QMessageBox, QDateEdit, QFileDialog,
    QLabel, QScrollArea, QComboBox, QInputDialog, QDialog
)
from PySide6.QtCore import Qt, QDate
from sqlalchemy import create_engine, Column, Integer, String, Date, Text, ForeignKey, DateTime, Sequence, BigInteger
from sqlalchemy.orm import sessionmaker, declarative_base
from datetime import datetime
import io
import os
import logging
from logging.handlers import RotatingFileHandler
from telebot import TeleBot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "DB_URL": "",
    "TELEGRAM_TOKEN": ""
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
handler = RotatingFileHandler('admin_panel.log', maxBytes=10*1024*1024, backupCount=5)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', handlers=[handler])
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot = TeleBot(CONFIG["TELEGRAM_TOKEN"], threaded=False)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
class ApplicationStatus:
    PENDING = "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
    APPROVED = "–æ–¥–æ–±—Ä–µ–Ω–∞"
    REJECTED = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
STYLES = {
    "nav_button": """
        QPushButton {
            padding: 8px;
            font-size: 12px;
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        QPushButton:hover {
            background-color: #e0e0e0;
        }
        QPushButton:pressed {
            background-color: #d0d0d0;
        }
    """,
    "card": """
        QWidget {
            padding: 2px;
            border-bottom: 1px solid #ddd;
            background-color: #fafafa;
            margin: 0px;
        }
    """,
    "label": """
        QLabel {
            padding: 0px;
            margin: 0px;
        }
    """,
    "approve_button": """
        QPushButton {
            background-color: #4CAF50;
            color: white;
            border-radius: 4px;
        }
        QPushButton:hover {
            background-color: #45a049;
        }
    """,
    "reject_button": """
        QPushButton {
            background-color: #f44336;
            color: white;
            border-radius: 4px;
        }
        QPushButton:hover {
            background-color: #da190b;
        }
    """,
    "action_button": """
        QPushButton {
            padding: 8px;
            font-size: 12px;
            margin: 0px;
        }
    """
}

# –ú–æ–¥–µ–ª–∏ –ë–î
class User(Base):
    __tablename__ = 'users'
    user_id = Column(BigInteger, primary_key=True)
    first_name = Column(String(100), nullable=False)
    last_name = Column(String(100), nullable=False)
    position = Column(String(100))
    department = Column(String(100))
    email = Column(String(100), unique=True, nullable=False)

class Application(Base):
    __tablename__ = 'applications'
    application_id = Column(Integer, Sequence('applications_application_id_seq'), primary_key=True)
    user_id = Column(BigInteger, ForeignKey('users.user_id'), nullable=False)
    start_date = Column(Date, nullable=False)
    end_date = Column(Date, nullable=False)
    type = Column(String(100), nullable=False)
    status = Column(String(20), nullable=False)
    reason = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Log(Base):
    __tablename__ = 'logs'
    log_id = Column(Integer, Sequence('logs_log_id_seq'), primary_key=True)
    user_id = Column(BigInteger, ForeignKey('users.user_id'), nullable=False)
    action = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(CONFIG["DB_URL"], pool_size=5, max_overflow=10)
Base.metadata.create_all(engine)
SessionFactory = sessionmaker(bind=engine)

# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
def notify_user(app_id, status):
    session = SessionFactory()
    try:
        app = session.query(Application).filter_by(application_id=app_id).first()
        if app:
            status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞" if status == ApplicationStatus.APPROVED else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            try:
                bot.send_message(app.user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} {status_text}!")
                session.add(Log(user_id=app.user_id, action=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏ #{app_id}: {status_text}"))
                session.commit()
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {app.user_id} –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏ #{app_id}: {status_text}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {app.user_id}: {e}")
                raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}")
    finally:
        session.close()

# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminPanel(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ CRM")
        self.setGeometry(100, 100, 800, 600)
        self.session = SessionFactory()
        self.current_page = 1
        self.per_page = 20
        self.init_ui()
        logger.info("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def init_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QVBoxLayout(main_widget)
        main_layout.setContentsMargins(5, 5, 5, 5)
        main_layout.setSpacing(2)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_layout = QHBoxLayout()
        nav_layout.setSpacing(5)
        self.btn_users = QPushButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        self.btn_applications = QPushButton("üìã –ó–∞—è–≤–∫–∏")
        self.btn_history = QPushButton("üïí –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")
        self.btn_reports = QPushButton("üìä –û—Ç—á–µ—Ç—ã")
        self.btn_logs = QPushButton("üìú –õ–æ–≥–∏")
        for btn in [self.btn_users, self.btn_applications, self.btn_history, self.btn_reports, self.btn_logs]:
            self.apply_style(btn, "nav_button")
            nav_layout.addWidget(btn)
        main_layout.addLayout(nav_layout)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ ID")
        self.status_filter = QComboBox()
        self.status_filter.addItems(["–í—Å–µ", ApplicationStatus.PENDING, ApplicationStatus.APPROVED, ApplicationStatus.REJECTED])
        self.search_input.textChanged.connect(lambda: self.show_applications(page=1))
        self.status_filter.currentTextChanged.connect(lambda: self.show_applications(page=1))
        filter_layout.addWidget(QLabel("–§–∏–ª—å—Ç—Ä:"))
        filter_layout.addWidget(self.search_input)
        filter_layout.addWidget(self.status_filter)
        main_layout.addLayout(filter_layout)

        # –û–±–ª–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.content_widget = QWidget()
        self.content_layout = QVBoxLayout(self.content_widget)
        self.content_layout.setSpacing(1)
        self.content_layout.setContentsMargins(0, 0, 0, 0)
        self.content_layout.setAlignment(Qt.AlignTop)
        self.scroll = QScrollArea()
        self.scroll.setWidget(self.content_widget)
        self.scroll.setWidgetResizable(True)
        self.scroll.setStyleSheet("QScrollArea { border: none; } QWidget { margin: 0px; }")
        main_layout.addWidget(self.scroll)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination_layout = QHBoxLayout()
        self.prev_page_btn = QPushButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è")
        self.next_page_btn = QPushButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è")
        self.page_label = QLabel("–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1")
        self.apply_style(self.prev_page_btn, "action_button")
        self.apply_style(self.next_page_btn, "action_button")
        self.apply_style(self.page_label, "label")
        self.prev_page_btn.clicked.connect(self.prev_page)
        self.next_page_btn.clicked.connect(self.next_page)
        pagination_layout.addWidget(self.prev_page_btn)
        pagination_layout.addWidget(self.page_label)
        pagination_layout.addWidget(self.next_page_btn)
        main_layout.addLayout(pagination_layout)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.btn_users.clicked.connect(lambda: self.show_users(page=1))
        self.btn_applications.clicked.connect(lambda: self.show_applications(page=1))
        self.btn_history.clicked.connect(lambda: self.show_history(page=1))
        self.btn_reports.clicked.connect(self.show_reports)
        self.btn_logs.clicked.connect(lambda: self.show_logs(page=1))
        self.show_applications(page=1)

    def apply_style(self, widget, style_key):
        widget.setStyleSheet(STYLES[style_key])

    def add_header(self, text):
        header = QLabel(f"<b>{text}</b>")
        self.apply_style(header, "label")
        self.content_layout.addWidget(header)

    def clear_content(self):
        logger.info("–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        while self.content_layout.count():
            item = self.content_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

    def log_action(self, user_id, action):
        try:
            self.session.add(Log(user_id=user_id, action=action))
            self.session.commit()
            logger.info(f"–õ–æ–≥: {action}")
        except Exception as e:
            self.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

    def prev_page(self):
        if self.current_page > 1:
            self.current_page -= 1
            self.refresh_content()

    def next_page(self):
        self.current_page += 1
        self.refresh_content()

    def refresh_content(self):
        if self.btn_applications.isDown():
            self.show_applications(self.current_page)
        elif self.btn_users.isDown():
            self.show_users(self.current_page)
        elif self.btn_history.isDown():
            self.show_history(self.current_page)
        elif self.btn_logs.isDown():
            self.show_logs(self.current_page)

    def show_users(self, page=1):
        logger.info(f"–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        self.current_page = page
        self.clear_content()
        self.add_header("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        offset = (page - 1) * self.per_page
        users = self.session.query(User).limit(self.per_page).offset(offset).all()
        if not users:
            no_data = QLabel("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            self.apply_style(no_data, "label")
            self.content_layout.addWidget(no_data)
        for user in users:
            user_widget = QWidget()
            user_layout = QHBoxLayout(user_widget)
            user_layout.setContentsMargins(0, 0, 0, 0)
            user_info = QLabel(f"ID: {user.user_id} | {user.first_name} {user.last_name} | {user.position or '-'} | {user.department or '-'} | {user.email}")
            edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
            delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
            edit_btn.clicked.connect(lambda _, u=user.user_id: self.edit_user(u))
            delete_btn.clicked.connect(lambda _, u=user.user_id: self.delete_user(u))
            user_layout.addWidget(user_info)
            user_layout.addStretch()
            user_layout.addWidget(edit_btn)
            user_layout.addWidget(delete_btn)
            self.apply_style(user_widget, "card")
            self.content_layout.addWidget(user_widget)
        self.page_label.setText(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

    def show_applications(self, page=1):
        logger.info(f"–ü–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        self.current_page = page
        self.clear_content()
        self.add_header("–ó–∞—è–≤–∫–∏")
        offset = (page - 1) * self.per_page
        query = self.session.query(Application, User).join(User)
        search_text = self.search_input.text().lower()
        if search_text:
            query = query.filter(
                (User.first_name.ilike(f"%{search_text}%")) |
                (User.last_name.ilike(f"%{search_text}%")) |
                (Application.application_id == search_text if search_text.isdigit() else False)
            )
        status = self.status_filter.currentText()
        if status != "–í—Å–µ":
            query = query.filter(Application.status == status)
        else:
            query = query.filter(Application.status == ApplicationStatus.PENDING)
        applications = query.limit(self.per_page).offset(offset).all()
        if not applications:
            no_data = QLabel("–ù–µ—Ç –∑–∞—è–≤–æ–∫")
            self.apply_style(no_data, "label")
            self.content_layout.addWidget(no_data)
        for app, user in applications:
            self.add_application_card(app, user, history=(app.status != ApplicationStatus.PENDING))
        self.page_label.setText(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

    def show_history(self, page=1):
        logger.info(f"–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        self.current_page = page
        self.clear_content()
        self.add_header("–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")
        offset = (page - 1) * self.per_page
        apps = self.session.query(Application, User).join(User).filter(
            Application.status.in_([ApplicationStatus.APPROVED, ApplicationStatus.REJECTED])
        ).limit(self.per_page).offset(offset).all()
        if not apps:
            no_data = QLabel("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            self.apply_style(no_data, "label")
            self.content_layout.addWidget(no_data)
        for app, user in apps:
            self.add_application_card(app, user, history=True)
        self.page_label.setText(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

    def format_application_text(self, app, user):
        return (
            f"#{app.application_id} | {user.first_name} {user.last_name} | "
            f"{app.type} | {app.start_date} ‚Äî {app.end_date} | "
            f"–ü—Ä–∏—á–∏–Ω–∞: {app.reason or '-'} | –°—Ç–∞—Ç—É—Å: {app.status}"
        )

    def add_application_card(self, app, user, history=False):
        card_widget = QWidget()
        card_layout = QHBoxLayout(card_widget)
        card_layout.setContentsMargins(0, 0, 0, 0)
        card_text = self.format_application_text(app, user)
        card_label = QLabel(card_text)
        card_label.setWordWrap(True)
        if not history:
            approve_btn = QPushButton("‚úÖ")
            reject_btn = QPushButton("‚ùå")
            approve_btn.setFixedSize(40, 40)
            reject_btn.setFixedSize(40, 40)
            self.apply_style(approve_btn, "approve_button")
            self.apply_style(reject_btn, "reject_button")
            approve_btn.clicked.connect(lambda: self.approve_application(app.application_id))
            reject_btn.clicked.connect(lambda: self.reject_application(app.application_id))
            card_layout.addWidget(card_label)
            card_layout.addStretch()
            card_layout.addWidget(approve_btn)
            card_layout.addWidget(reject_btn)
        else:
            card_layout.addWidget(card_label)
        self.apply_style(card_widget, "card")
        self.content_layout.addWidget(card_widget)

    def show_reports(self):
        logger.info("–ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–æ–≤")
        self.clear_content()
        self.add_header("–û—Ç—á–µ—Ç—ã")
        report_btns = [
            ("–ó–∞—è–≤–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥", self.report_applications_period),
            ("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –æ—Ç–¥–µ–ª–∞–º", self.report_duration_departments),
            ("–ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", self.report_employee_applications)
        ]
        for text, callback in report_btns:
            btn = QPushButton(text)
            btn.clicked.connect(callback)
            self.apply_style(btn, "action_button")
            self.content_layout.addWidget(btn)

    def show_logs(self, page=1):
        logger.info(f"–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        self.current_page = page
        self.clear_content()
        self.add_header("–õ–æ–≥–∏")
        offset = (page - 1) * self.per_page
        logs = self.session.query(Log).order_by(Log.timestamp.desc()).limit(self.per_page).offset(offset).all()
        if not logs:
            no_data = QLabel("–ù–µ—Ç –ª–æ–≥–æ–≤")
            self.apply_style(no_data, "label")
            self.content_layout.addWidget(no_data)
        for log in logs:
            user = self.session.query(User).filter_by(user_id=log.user_id).first()
            log_text = f"{log.timestamp.strftime('%Y-%m-%d %H:%M')} | {user.first_name if user else log.user_id} | {log.action}"
            log_label = QLabel(log_text)
            self.apply_style(log_label, "label")
            self.content_layout.addWidget(log_label)
        self.page_label.setText(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

    def edit_user(self, user_id):
        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        user = self.session.query(User).filter_by(user_id=user_id).first()
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        layout = QVBoxLayout(dialog)
        first_name = QLineEdit(user.first_name)
        last_name = QLineEdit(user.last_name)
        position = QLineEdit(user.position or "")
        department = QLineEdit(user.department or "")
        email = QLineEdit(user.email)
        layout.addWidget(QLineEdit(f"ID: {user_id}", readOnly=True))
        layout.addWidget(first_name)
        layout.addWidget(last_name)
        layout.addWidget(position)
        layout.addWidget(department)
        layout.addWidget(email)
        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.clicked.connect(
            lambda: self.save_user(user_id, first_name.text(), last_name.text(), position.text(), department.text(), email.text(), dialog))
        layout.addWidget(save_btn)
        dialog.setStyleSheet("QWidget { padding: 10px; }")
        dialog.exec()

    def save_user(self, user_id, first_name, last_name, position, department, email, dialog):
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            user = self.session.query(User).filter_by(user_id=user_id).first()
            user.first_name = first_name
            user.last_name = last_name
            user.position = position or None
            user.department = department or None
            user.email = email
            self.log_action(user_id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            self.session.commit()
            dialog.close()
            self.show_users(self.current_page)
        except Exception as e:
            self.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    def delete_user(self, user_id):
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            session = SessionFactory()
            try:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session.query(Application).filter_by(user_id=user_id).delete()

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session.query(Log).filter_by(user_id=user_id).delete()

                # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(User).filter_by(user_id=user_id).first()
                if user:
                    session.delete(user)
                    self.log_action(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                    session.commit()
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
                else:
                    QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                self.show_users(self.current_page)
            except Exception as e:
                session.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            finally:
                session.close()

    def approve_application(self, app_id):
        logger.info(f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id}")
        try:
            app = self.session.query(Application).filter_by(application_id=app_id).first()
            if app and app.status == ApplicationStatus.PENDING:
                app.status = ApplicationStatus.APPROVED
                self.log_action(app.user_id, f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                self.session.commit()
                notify_user(app_id, ApplicationStatus.APPROVED)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞")
            else:
                logger.warning(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING")
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞")
            self.show_applications(self.current_page)
        except Exception as e:
            self.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É: {str(e)}")

    def reject_application(self, app_id):
        logger.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id}")
        try:
            app = self.session.query(Application).filter_by(application_id=app_id).first()
            if app and app.status == ApplicationStatus.PENDING:
                reason, ok = QInputDialog.getText(self, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:")
                if ok:
                    app.status = ApplicationStatus.REJECTED
                    app.reason = f"{app.reason or ''} [–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {reason}]"
                    self.log_action(app.user_id, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                    self.session.commit()
                    notify_user(app_id, ApplicationStatus.REJECTED)
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                else:
                    logger.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    return
            else:
                logger.warning(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING")
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            self.show_applications(self.current_page)
        except Exception as e:
            self.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É: {str(e)}")

    def report_applications_period(self):
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: –ó–∞—è–≤–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥")
        dialog = QDialog(self)
        dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥")
        layout = QVBoxLayout(dialog)

        start_date_edit = QDateEdit(QDate.currentDate())
        start_date_edit.setCalendarPopup(True)
        start_date_edit.setDisplayFormat("yyyy-MM-dd")
        layout.addWidget(QLabel("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:"))
        layout.addWidget(start_date_edit)

        end_date_edit = QDateEdit(QDate.currentDate())
        end_date_edit.setCalendarPopup(True)
        end_date_edit.setDisplayFormat("yyyy-MM-dd")
        layout.addWidget(QLabel("–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞:"))
        layout.addWidget(end_date_edit)

        button_box = QHBoxLayout()
        ok_btn = QPushButton("OK")
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        ok_btn.clicked.connect(dialog.accept)
        cancel_btn.clicked.connect(dialog.reject)
        button_box.addWidget(ok_btn)
        button_box.addWidget(cancel_btn)
        layout.addLayout(button_box)

        if dialog.exec():
            start_date = start_date_edit.date().toPython()
            end_date = end_date_edit.date().toPython()
            apps = self.session.query(Application).filter(
                Application.start_date >= start_date,
                Application.end_date <= end_date
            ).all()
            if not apps:
                logger.info("–ó–∞—è–≤–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞—è–≤–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return
            self.generate_pdf_report("–ó–∞—è–≤–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥",
                                     [f"#{a.application_id} - {a.type}, {a.start_date} - {a.end_date}, {a.status}" for a in apps])
        else:
            logger.info("–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω")

    def report_duration_departments(self):
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –æ—Ç–¥–µ–ª–∞–º")
        year, ok = QInputDialog.getInt(self, "–ì–æ–¥", "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì):")
        if ok:
            start_date = datetime(year, 1, 1)
            end_date = datetime(year, 12, 31)
            apps = self.session.query(Application).filter(
                Application.start_date >= start_date.date(),
                Application.end_date <= end_date.date()
            ).all()
            dept_duration = {}
            for app in apps:
                user = self.session.query(User).filter_by(user_id=app.user_id).first()
                dept = user.department or "–ë–µ–∑ –æ—Ç–¥–µ–ª–∞"
                days = (app.end_date - app.start_date).days + 1
                dept_duration[dept] = dept_duration.get(dept, 0) + days
            self.generate_pdf_report("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –æ—Ç–¥–µ–ª–∞–º",
                                     [f"{dept}: {days} –¥–Ω–µ–π" for dept, days in dept_duration.items()])
        else:
            logger.info("–í–≤–æ–¥ –≥–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω")

    def report_employee_applications(self):
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: –ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        user_id, ok = QInputDialog.getInt(self, "ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
        if ok:
            user = self.session.query(User).filter_by(user_id=user_id).first()
            if not user:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            apps = self.session.query(Application).filter_by(user_id=user_id).all()
            if not apps:
                logger.info(f"–ó–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ó–∞—è–≤–∫–∏ –¥–ª—è {user.first_name} {user.last_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return
            title = f"–ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user.first_name} {user.last_name}"
            self.generate_pdf_report(title,
                                     [f"#{a.application_id} - {a.type}, {a.start_date} - {a.end_date}, {a.status}" for a in apps])
        else:
            logger.info("–í–≤–æ–¥ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω")

    def generate_pdf_report(self, title, content_lines):
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞: {title}")
        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.pdfbase import pdfmetrics
            from reportlab.pdfbase.ttfonts import TTFont
            import os

            # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à—Ä–∏—Ñ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                font_paths = [
                    "DejaVuSans.ttf",  # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                    "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",  # Linux
                    "C:/Windows/Fonts/DejaVuSans.ttf"  # Windows
                ]

                found_font = None
                for path in font_paths:
                    if os.path.exists(path):
                        found_font = path
                        break

                if not found_font:
                    raise FileNotFoundError("–®—Ä–∏—Ñ—Ç DejaVuSans.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω")

                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
                pdfmetrics.registerFont(TTFont('DejaVuSans', found_font))
                pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', found_font))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –¥–ª—è bold

                # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
                styles = getSampleStyleSheet()
                styles.add(ParagraphStyle(
                    name='DejaVuNormal',
                    fontName='DejaVuSans',
                    fontSize=10,
                    leading=12,
                    encoding='UTF-8'
                ))
                styles.add(ParagraphStyle(
                    name='DejaVuTitle',
                    fontName='DejaVuSans-Bold',
                    fontSize=14,
                    leading=16,
                    spaceAfter=12,
                    encoding='UTF-8'
                ))

            except Exception as font_error:
                logger.error(f"–û—à–∏–±–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤: {font_error}", exc_info=True)
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª DejaVuSans.ttf –¥–æ—Å—Ç—É–ø–µ–Ω."
                )
                return

            # 2. –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
                f"{title.replace(' ', '_')}.pdf",
                "PDF Files (*.pdf)"
            )

            if not filename:
                return

            if not filename.lower().endswith('.pdf'):
                filename += '.pdf'

            # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                encoding='UTF-8'
            )

            story = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph(title, styles['DejaVuTitle']))
            story.append(Spacer(1, 12))

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            for line in content_lines:
                if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    story.append(Paragraph(str(line), styles['DejaVuNormal']))
                    story.append(Spacer(1, 6))

            try:
                doc.build(story)
            except Exception as build_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è PDF: {build_error}", exc_info=True)
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF:\n{build_error}"
                )
                return

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            try:
                with open(filename, 'wb') as f:
                    f.write(buffer.getvalue())

                logger.info(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{filename}"
                )
            except Exception as io_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {io_error}", exc_info=True)
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{io_error}"
                )

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{e}"
            )

    def closeEvent(self, event):
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        self.session.close()
        engine.dispose()
        event.accept()

if __name__ == "__main__":
    app = QApplication([])
    window = AdminPanel()
    window.show()
    app.exec()